@page "/"
@inject IJSRuntime JS
@using Microsoft.AspNetCore.Components.Web

<div class="chessboard">
    @for (int row = 0; row < 8; row++)
    {
        <div class="row">
            @for (int col = 0; col < 8; col++)
            {
                int currentRow = row;
                int currentCol = col;
                <div class="square @(IsDarkSquare(currentRow, currentCol) ? "dark" : "light")"
                     ondragover="event.preventDefault()"
                     @ondrop="async () => await DropPiece(currentRow, currentCol)">
                    @if (board[currentRow, currentCol] != null)
                    {
                        <img src="@board[currentRow, currentCol]?.Image"
                             class="chess-piece"
                             draggable="true"
                             @ondragstart="async () => await DragPiece(currentRow, currentCol)" />
                    }
                </div>
            }
        </div>
    }
</div>

@code {
    private ChessPiece?[,] board = new ChessPiece?[8, 8];

    protected override void OnInitialized()
    {
        InitializeBoard();
    }

    private readonly Dictionary<char, (string Image, ChessPieceType Type)> pieceMap = new()
    {
        {'p', ("images/bP.png", ChessPieceType.Pawn)},
        {'r', ("images/bR.png", ChessPieceType.Rook)},
        {'n', ("images/bN.png", ChessPieceType.Knight)},
        {'b', ("images/bB.png", ChessPieceType.Bishop)},
        {'q', ("images/bQ.png", ChessPieceType.Queen)},
        {'k', ("images/bK.png", ChessPieceType.King)},
        {'P', ("images/wP.png", ChessPieceType.Pawn)},
        {'R', ("images/wR.png", ChessPieceType.Rook)},
        {'N', ("images/wN.png", ChessPieceType.Knight)},
        {'B', ("images/wB.png", ChessPieceType.Bishop)},
        {'Q', ("images/wQ.png", ChessPieceType.Queen)},
        {'K', ("images/wK.png", ChessPieceType.King)}
    };
    
    private void InitializeBoard(string fen = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR")
    {
        // Clear the board
        board = new ChessPiece[8, 8];
        
        string[] ranks = fen.Split('/');
        for (int row = 0; row < 8; row++)
        {
            int col = 0;
            foreach (char c in ranks[row])
            {
                if (char.IsDigit(c))
                {
                    col += c - '0';
                }
                else
                {
                    var (image, type) = pieceMap[c];
                    board[row, col] = new ChessPiece 
                    { 
                        Image = image,
                        Type = type,
                        Color = char.IsUpper(c) ? ChessPieceColor.White : ChessPieceColor.Black
                    };
                    col++;
                }
            }
        }
    }

    private bool IsDarkSquare(int row, int col)
    {
        return (row + col) % 2 != 0;
    }

    private async Task DragPiece(int row, int col)
    {
        Console.WriteLine($"Drag started: {row},{col}");
        await JS.InvokeVoidAsync("chessInterop.setData", $"{row},{col}");
    }
    private async Task DropPiece(int row, int col)
    {
        Console.WriteLine($"Drop at: {row},{col}");
        var data = await JS.InvokeAsync<string>("chessInterop.getData");
        if (string.IsNullOrEmpty(data)) return;
    
        var parts = data.Split(',');
        var fromRow = int.Parse(parts[0]);
        var fromCol = int.Parse(parts[1]);
    
        // Add basic validation
        if (fromRow == row && fromCol == col) return;
        if (board[fromRow, fromCol] == null) return;
    
        // Move the piece
        board[row, col] = board[fromRow, fromCol];
        board[fromRow, fromCol] = null;
    
        StateHasChanged();
    }
    
    private void AllowDrop(DragEventArgs e)
    {
        // In Blazor, preventing default behavior is handled by returning true
    }
}